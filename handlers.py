from datetime import datetime

from aiogram import Router, F, Bot, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, message_id, CallbackQuery, InlineKeyboardButton, \
    InputFile, FSInputFile, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from decimal import Decimal
import text
from datetime import datetime


from database.db import DataBase

import subprocess
import html
import logging
import os


db = DataBase()
router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class OrderStates(StatesGroup):
    order_box = State()
    choosing_date = State()
    survey = State()


print("v1.0")

@router.message(Command("metrics"))
async def metrics_handler(message: Message):
    id_username = message.from_user.username
    admin_usernames = ['fazylov_v', 'Mihter_2208', 'irinacreek','Yazshiopl']
    if id_username in admin_usernames:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç metric.py
            subprocess.run(["python", "./metrics/metric.py"], check=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª stats.txt
            if os.path.exists("stats.txt"):
                with open("stats.txt", "r", encoding="utf-8") as file:
                    stats_content = file.read()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(f"üìä –ú–µ—Ç—Ä–∏–∫–∏:\n\n{html.escape(stats_content)}", parse_mode="HTML")
            else:
                await message.answer("–§–∞–π–ª stats.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except subprocess.CalledProcessError:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(Command("orders"))
async def metrics_handler(message: Message):
    id_username = message.from_user.username
    admin_usernames = ['fazylov_v', 'Mihter_2208', 'irinacreek', 'Yazshiopl']
    if id_username in admin_usernames:
        query = "SELECT u.tg_username, o.date FROM orders o LEFT JOIN users u ON u.tg_id = o.tg_id ORDER BY o.date"
        orders = db.exec_query(query)
        text = ''
        for order in orders:
            text += f"@{order[0]} {order[1].strftime("%B %d")}\n"
        await message.answer(text)

@router.message(Command("start"))
async def start_handler(message: Message):
    tg_id = message.from_user.id
    username = message.from_user.username
    db.save_user_action(tg_id, username, '/start')
    db.save_user(tg_id, username)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º", callback_data="view_contents"))
    builder.row(InlineKeyboardButton(text="–•–æ—á—É –∫–æ—Ä–æ–±–∫—É", callback_data="order_box"))

    photo = FSInputFile("./img/imgbox2.jpg")
    await message.answer_photo(photo, caption=text.privet, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'view_contents')
async def view_contents_handler(call: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–•–æ—á—É –∫–æ—Ä–æ–±–∫—É", callback_data="order_box")
    )
    await call.message.answer(text=text.view_contents, reply_markup=builder.as_markup())
    await state.set_state(OrderStates.order_box)


@router.callback_query(F.data == 'order_box')
async def get_date_handler(call: CallbackQuery, state: FSMContext):
    tg_id = call.from_user.id
    username = call.from_user.username
    #—Ç—É—Ç —Å–æ–±—ã—Ç–∏–µ 'want_box'
    db.save_user_action(tg_id, username, 'want_box')

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ó–∞–∫–∞–∂—É –ø–æ–∑–∂–µ", callback_data="later_order"))
    await call.message.answer(text=text.pleace_date, reply_markup=builder.as_markup())
    await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.choosing_date)
async def save_dates_handler(message: Message, state: FSMContext):
    dates = message.text.strip()

    if not validate_dates(dates):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23.01 15.04 .\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏!")
        return

    await state.update_data(dates=dates)

    tg_id = message.from_user.id
    db.save_order_date(tg_id, dates)

    username = message.from_user.username
    db.save_user_action(tg_id, username, 'preorder')


    await message.answer("–í–∞—à–∏ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –±–ª–∏–∂–µ –∫ —Å—Ä–æ–∫—É.")
    await state.set_state(OrderStates.survey)
    await message.answer(text.answer_one)
    print(await state.get_state())


def validate_dates(dates: str) -> bool:
    date_list = dates.split(' ')
    for date_str in date_list:
        try:
            datetime.strptime(date_str, "%d.%m")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞
        except ValueError:
            return False
    return True

@router.callback_query(F.data == 'later_order')
async def later_order_handler(call: CallbackQuery, state: FSMContext):
    tg_id = call.from_user.id
    username = call.from_user.username
    #—Ç—É—Ç –º–µ—Ç–æ–¥ –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—é –∏–Ω—Ñ—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫, —Å–æ–±—ã—Ç–∏–µ 'later_order'
    db.save_user_action(tg_id, username, 'later_order')

    await call.message.answer("–û–∫–µ–π, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.")
    await call.message.answer(text.answer_one)
    await state.set_state(OrderStates.survey)
    print(await state.get_state())

@router.message(OrderStates.survey)
async def save_answer_handler(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    username = message.from_user.username
    answer = message.text.strip()

    success = db.save_poll_answer(tg_id, answer)

    if success:
        await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        db.save_user_action(tg_id, username, 'survey')
        await state.clear()

        await start_handler(message)
    else:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        await state.clear()
        await start_handler(message)